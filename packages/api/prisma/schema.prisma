// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]
  items      Item[]
  sessions   Session[]
  shopList   ShopList[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  @@unique([userId, name])
}

model Item {
  id         Int      @id @default(autoincrement())
  name       String
  note       String?
  imageUrl   String?
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  shopListItem ShopListItem[]
}

model ShopList {
  id       Int    @id @default(autoincrement())
  name     String
  statusId Int
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item ShopListItem[]
}

model ShopListItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  itemId     Int
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  shopListId Int
  shopList   ShopList @relation(fields: [shopListId], references: [id], onDelete: Cascade)
}

model Status {
  id   Int    @id @default(autoincrement())
  name String

  shopList ShopList[]
}
